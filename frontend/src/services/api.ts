/**
 * API service for Origo backend communication
 */

import axios from 'axios';\nimport type { AnalysisResult, TextAnalysisRequest } from '../types/analysis';\n\n// Configure axios defaults\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 120000, // 2 minutes timeout for analysis\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('Response error:', error);\n    \n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.detail || error.response.data?.message || 'Server error';\n      throw new Error(`${message} (${error.response.status})`);\n    } else if (error.request) {\n      // Network error\n      throw new Error('Network error - please check if the backend server is running');\n    } else {\n      // Other error\n      throw new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n);\n\n/**\n * Analyze text for AI-generated content detection\n * @param text - Text to analyze\n * @returns Promise with analysis results\n */\nexport const analyzeText = async (text: string): Promise<AnalysisResult> => {\n  if (!text || text.trim().length < 10) {\n    throw new Error('Text must be at least 10 characters long');\n  }\n\n  if (text.length > 50000) {\n    throw new Error('Text must be less than 50,000 characters');\n  }\n\n  const request: TextAnalysisRequest = { text: text.trim() };\n  \n  try {\n    const response = await apiClient.post<AnalysisResult>('/analyze', request);\n    return response.data;\n  } catch (error) {\n    console.error('Analysis request failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Check backend health status\n * @returns Promise with health status\n */\nexport const checkHealth = async (): Promise<any> => {\n  try {\n    const response = await apiClient.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Get API information\n * @returns Promise with API info\n */\nexport const getApiInfo = async (): Promise<any> => {\n  try {\n    const response = await apiClient.get('/');\n    return response.data;\n  } catch (error) {\n    console.error('API info request failed:', error);\n    throw error;\n  }\n};\n\nexport default apiClient;