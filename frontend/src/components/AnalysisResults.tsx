/**
 * AnalysisResults component for displaying comprehensive analysis results
 */

import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Target, BarChart3, FileText, List } from 'lucide-react';
import type { AnalysisResult } from '../types/analysis';
import { ScoreDisplay } from './ScoreDisplay';
import { HighlightedText } from './HighlightedText';
import { WordTable } from './WordTable';
import { MetricsBreakdown } from './MetricsBreakdown';

interface AnalysisResultsProps {
  result: AnalysisResult;
}

export const AnalysisResults: React.FC<AnalysisResultsProps> = ({ result }) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'detailed' | 'words'>('overview');
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['overview']));

  const toggleSection = (section: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(section)) {
      newExpanded.delete(section);
    } else {
      newExpanded.add(section);
    }
    setExpandedSections(newExpanded);
  };

  const getScoreColor = (score: number): string => {
    if (score >= 0.7) return 'high';
    if (score >= 0.4) return 'medium';
    return 'low';
  };

  const getScoreDescription = (score: number): string => {
    if (score >= 0.8) return 'Very High AI Probability';
    if (score >= 0.6) return 'High AI Probability';
    if (score >= 0.4) return 'Moderate AI Probability';
    if (score >= 0.2) return 'Low AI Probability';
    return 'Very Low AI Probability';
  };

  return (
    <div className="analysis-results">
      {/* Overall Score Section */}
      <div className="results-section">
        <div className="section-header" onClick={() => toggleSection('overview')}>
          <div className="section-title">
            <Target className="section-icon" size={20} />
            <h3>Overall Analysis</h3>
          </div>
          {expandedSections.has('overview') ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
        </div>
        
        {expandedSections.has('overview') && (
          <div className="section-content">
            <div className="overall-score">
              <ScoreDisplay 
                score={result.overall_score} 
                size="large" 
                label="AI Detection Score"
              />
              <div className="score-interpretation">
                <span className={`score-badge ${getScoreColor(result.overall_score)}`}>
                  {getScoreDescription(result.overall_score)}
                </span>
                <p className="score-explanation">
                  This score represents the likelihood that the text was generated by AI, 
                  based on multiple analysis heuristics including perplexity, structural patterns, 
                  and semantic coherence.
                </p>
              </div>
            </div>
            
            <MetricsBreakdown scores={result.global_scores} />
          </div>
        )}
      </div>

      {/* Analysis Tabs */}
      <div className="analysis-tabs">
        <div className="tab-buttons">
          <button
            className={`tab-button ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            <BarChart3 size={16} />
            Overview
          </button>
          <button
            className={`tab-button ${activeTab === 'detailed' ? 'active' : ''}`}
            onClick={() => setActiveTab('detailed')}
          >
            <FileText size={16} />
            Detailed Analysis
          </button>
          <button
            className={`tab-button ${activeTab === 'words' ? 'active' : ''}`}
            onClick={() => setActiveTab('words')}
          >
            <List size={16} />
            Word Analysis
          </button>
        </div>

        <div className="tab-content">
          {activeTab === 'overview' && (
            <div className="overview-tab">
              <div className="metrics-grid">
                {Object.entries(result.global_scores).map(([metric, score]) => (
                  <div key={metric} className="metric-card">
                    <h4 className="metric-name">
                      {metric.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                    </h4>
                    <ScoreDisplay score={score} size="medium" />
                    <div className="metric-description">
                      {getMetricDescription(metric)}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'detailed' && (
            <div className="detailed-tab">
              <HighlightedText 
                paragraphs={result.paragraphs}
              />
            </div>
          )}

          {activeTab === 'words' && (
            <div className="words-tab">
              <WordTable words={result.word_analysis.unique_words} />
            </div>
          )}
        </div>
      </div>

      {/* Metadata */}
      {result.analysis_metadata && (
        <div className="metadata-section">
          <div className="metadata-grid">
            <div className="metadata-item">
              <span className="label">Text Length:</span>
              <span className="value">{result.analysis_metadata.text_length.toLocaleString()} characters</span>
            </div>
            <div className="metadata-item">
              <span className="label">Sentences:</span>
              <span className="value">{result.analysis_metadata.sentence_count}</span>
            </div>
            <div className="metadata-item">
              <span className="label">Paragraphs:</span>
              <span className="value">{result.analysis_metadata.paragraph_count}</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

function getMetricDescription(metric: string): string {
  const descriptions: Record<string, string> = {
    perplexity: 'Measures text predictability using GPT-2. Lower values suggest AI generation.',
    burstiness: 'Analyzes sentence length and structure variation. Uniform patterns suggest AI.',
    semantic_coherence: 'Evaluates semantic flow and consistency. Extreme coherence may indicate AI.',
    ngram_similarity: 'Detects repetitive patterns and n-gram similarities common in AI text.'
  };
  
  return descriptions[metric] || 'Analysis metric for AI detection.';
}